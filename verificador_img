from datetime import datetime
import pandas as pd
import requests
import fitz  
import os

class verificarPDF:
    def __init__(self, base_url, log_directory, instituicao_directory, instituicao):
        print("Inicializando o verificador.")
        self.base_url = base_url
        self.log_directory = log_directory
        self.instituicao_directory = instituicao_directory
        self.instituicao = instituicao

    def verificar_pdfs(self):
        # Criando diretório de logs, se necessário
        os.makedirs(self.log_directory, exist_ok=True)
        
        # Verificando diretórios de instituições dentro da pasta Arquivos
        for nome_instituicao in os.listdir(self.instituicao_directory):
            codigo_instituicao = self.instituicao.get(nome_instituicao)
            
            # Verificando se existe o código da instituição no dicionário
            if codigo_instituicao:
                print(f"Processando instituição: {nome_instituicao} com código {codigo_instituicao}...")
                caminho_pasta_instituicao = os.path.join(self.instituicao_directory, nome_instituicao)

                # Encontrando arquivo
                for arquivo in os.listdir(caminho_pasta_instituicao):
                    if arquivo.endswith('.xlsx') or arquivo.endswith('.csv'):
                        self.processar_arquivo(caminho_pasta_instituicao, arquivo, nome_instituicao, codigo_instituicao)

    def processar_arquivo(self, caminho_pasta_instituicao, nome_arquivo, nome_instituicao, codigo_instituicao):
        print(f"Processando arquivo: {nome_arquivo}.")
        # Obter o caminho do arquivo e log
        caminho_arquivo = os.path.join(caminho_pasta_instituicao, nome_arquivo)
        log_nome_arquivo = f"{os.path.splitext(nome_arquivo)[0]}.txt"
        log_caminho_arquivo = os.path.join(self.log_directory, log_nome_arquivo)

        # Lendo arquivos se forem excel ou csv
        if nome_arquivo.endswith('.xlsx'):
            df = pd.read_excel(caminho_arquivo)
        elif nome_arquivo.endswith('.csv'):
            df = pd.read_csv(caminho_arquivo)

        # Procurar o nome do arquivo nas colunas NOVO_VALOR e/ou DESCRIÇÃO
        for column in ['NOVO_VALOR', 'DESCRIÇÃO']:
            if column in df.columns:
                for nome_imagem in df[column]:
                    self.formatar_url(nome_imagem.strip(), codigo_instituicao, nome_instituicao, log_caminho_arquivo)
                
        # Excluindo o arquivo processado
        os.remove(caminho_arquivo)

    # Formatando url
    def formatar_url(self, nome_imagem, codigo_instituicao, nome_instituicao, log_caminho_arquivo):
        print(f"Nome do PDF: {nome_imagem}")
        url = self.base_url.format(numero_da_instituicao=codigo_instituicao, nome_do_pdf=nome_imagem)
        self.check_url(url, nome_instituicao, nome_imagem, log_caminho_arquivo)

    # Checar se o arquivo existe ou está corrompido
    def check_url(self, url, instituicao, nome_do_pdf, log_caminho_arquivo):
        print(f"Verificando o status da URL: {url}")
        try:
            response = requests.get(url)
            # Verificar se o link abre
            if response.status_code == 200:
                temp_caminho_arquivo = os.path.join(self.log_directory, nome_do_pdf)
                with open(temp_caminho_arquivo, 'wb') as f:
                    f.write(response.content)
                
                # Se o link funcionar, verificar se o arquivo está corrompido
                if not self.pdf_corrompido(temp_caminho_arquivo):
                    status = 'Encontrado'
                else:
                    status = 'Corrompido'
                
                os.remove(temp_caminho_arquivo)
            else:
                status = 'Não encontrado'
        except requests.RequestException as e:
            status = f'Erro de verificação: {str(e)}'

        print(f"Status: {status} para {nome_do_pdf}")

        # Mensagem grava no log
        mensagem_log = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Instituição: {instituicao}, PDF: {nome_do_pdf}, Status: {status}, URL: {url}\n"
        with open(log_caminho_arquivo, 'a') as log_file:
            log_file.write(mensagem_log)

    # Função para abrir o PDF e verificar se está corrompido
    def pdf_corrompido(self, caminho_do_arquivo):
        try:
            pdf_document = fitz.open(caminho_do_arquivo)
            return False
        except Exception as e:
            print(f"Erro ao abrir o PDF: {e}")
            return True

# Códigos das instituições
codigos_os = {
    'spdm': '263', 'vivario': '264', 'fas': '265', 'cejam': '268',
    'riosaude': '9612', 'gnosis': '9615', 'ideias': '10040',
    'cieds': '10358', 'htmj': '9803', 'cruzvermelha': '9739',
    'fiotec': '259', 'iabas': '261', 'ciedsbrasil': '11225', 'ipcep': '9900'
}

# Diretórios de entrada de arquivos e saída de log
entrada = r"C:\Users\03477551\Documents\GMAPG_compartilhada\verificador_img_novo\Arquivos"
resultado = r"C:\Users\03477551\Documents\GMAPG_compartilhada\verificador_img_novo\Resultados"

# Definindo a URL
base_url = "https://osinfo.prefeitura.rio/download/{numero_da_instituicao}/45/{nome_do_pdf}"

# Pau na máquina
verificador = verificarPDF(base_url, resultado, entrada, codigos_os)
verificador.verificar_pdfs()
